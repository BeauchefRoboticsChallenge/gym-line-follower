from .track import Track
import os

obj_string = r"""# Autogenerated .obj file for pybullet simulation.
mtllib {mtl_file}
o Plane
v {x:.6f} -{y:.6f} 0.000000
v {x:.6f} {y:.6f} 0.000000â€œ
v -{x:.6f} {y:.6f} 0.000000
v -{x:.6f}  -{y:.6f} 0.000000

vt 1.000000 0.000000
vt 1.000000 1.000000
vt 0.000000 1.000000
vt 0.000000 0.000000

usemtl Material
s off
f 1/1 2/2 3/3
f 1/1 3/3 4/4
"""

mtl_string = r"""# Autogenerated .mtl file for pybullet simulation.
newmtl Material
Ns 10.0000
Ni 1.5000
d 1.0000
Tr 0.0000
Tf 1.0000 1.0000 1.0000 
illum 2
Ka 0.0000 0.0000 0.0000
Kd 0.5880 0.5880 0.5880
Ks 0.0000 0.0000 0.0000
Ke 0.0000 0.0000 0.0000
map_Ka {texture_file}
map_Kd {texture_file}
"""
# Autogenerated .urdf file for pybullet simulation.
urdf_string = r"""
<?xml version="0.0" ?>
<robot name="plane">
  <link name="planeLink">
  <contact>
      <lateral_friction value="1"/>
  </contact>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
       <mass value=".0"/>
       <inertia ixx="0" ixy="0" ixz="0" iyy="0" iyz="0" izz="0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="track_plane.generated.obj" scale="1 1 1"/>
      </geometry>
       <material name="white">
        <color rgba="1 1 1 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 -5"/>
      <geometry>
        <box size="{width:.6f} {height:.6f} 10"/>
      </geometry>
    </collision>
  </link>
</robot>
"""


def build_track_plane(track: Track, border_w=0.3, ppm=1000, path=None):
    """
    Render track texture and build .obj and .mtl files describing track plane. Use .obj file inside .urdf to
    import track plane in pybullet.
    :param track: array of track points shape (, 2)
    :param border_w: track outside border width in meters
    :param ppm: render resolution in pixel per meter
    :param path: save path, if None local path is used
    :return: rendered track image array
    """
    obj_file = "track_plane.generated.obj"
    mtl_file = "track_plane.generated.mtl"
    urdf_file = "track_plane.generated.urdf"
    texture_file = "track_texture.generated.png"

    if path is not None:
        obj_save_path = os.path.join(path, obj_file)
        mtl_save_path = os.path.join(path, mtl_file)
        urdf_save_path = os.path.join(path, urdf_file)
        texture_file_save_path = os.path.join(path, texture_file)
    else:
        obj_save_path = obj_file
        mtl_save_path = mtl_file
        urdf_save_path = urdf_file
        texture_file_save_path = texture_file

    img=track.render( border_w=border_w, ppm=ppm, save=texture_file_save_path)
    x = (track.width + 2*border_w) / 2
    y = (track.height + 2*border_w) / 2
    obj = obj_string.format(x=x, y=y, mtl_file=mtl_file)
    mtl = mtl_string.format(texture_file=texture_file)
    urdf = urdf_string.format(width=2*x, height=2*y)
    with open(obj_save_path, "w") as f:
        f.write(obj)
    with open(mtl_save_path, "w") as f:
        f.write(mtl)
    with open(urdf_save_path, "w") as f:
        f.write(urdf)

    return img